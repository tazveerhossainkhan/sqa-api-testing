{
	"info": {
		"_postman_id": "483a0f06-c3b3-49b0-927a-bfc02fae569a",
		"name": "SQA Assignment-1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33063678"
	},
	"item": [
		{
			"name": "test",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Students",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(student) {",
							"        pm.expect(student).to.have.property('id');",
							"        pm.expect(student).to.have.property('name');",
							"        pm.expect(student).to.have.property('personnummer');",
							"        pm.expect(student).to.have.property('courses_passed');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Id is a positive integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(student) {",
							"        pm.expect(student.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
							"    });",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Student Data (Valid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains student data\", function () {",
							"const responseData = pm.response.json();",
							"pm.expect(responseData).to.have.property('id');",
							"pm.expect(responseData).to.have.property('name');",
							"pm.expect(responseData).to.have.property('personnummer');",
							"pm.expect(responseData).to.have.property('courses_passed');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student/6",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Student Data (Invalid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Response contains error message\", function () {",
							"const responseData = pm.response.json();",
							"pm.expect(responseData).to.have.property('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student/-1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student",
						"-1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Student Data (ID not exist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response contains error message\", function () {",
							"   const responseData = pm.response.json();",
							"   pm.expect(responseData).to.have.property('error');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student/5000000",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student",
						"5000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Student with Duplicate number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Personnummer is duplicate\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.error).to.include(\"Personnummer already belongs\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Md Tazveer Hossain Khan\",\n    \"personnummer\": \"950123-1234\",\n    \"courses_passed\": [\"CSE1010\", \"CSE2010\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/create",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Student with Invalid input",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Aungona\",\n    \"personnummer\": \"1234\",\n    \"courses_passed\": [\"CSE1010\", \"DSE2020\"]\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/create",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Student with valid input",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"John Ceena\",\n    \"personnummer\": \"850101-1234\",\n    \"courses_passed\": [\"CSE1200\", \"DSE2400\", \"CSE3100\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/create",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains correct student ID\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.id).to.eql(11);  ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"B Dhrubo\",\n    \"personnummer\": \"990101-5678\",\n    \"courses_passed\": [\n        \"CSE4000\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/update/11",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"update",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student InValid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message for updating personnummer\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('error');",
							"    pm.expect(responseData.error).to.include(\"Changes to personnummer are not allowed\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"B Dhrubo\",\n  \"personnummer\": \"970101-5678\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/update/11",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"update",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Valid Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Student with no courses is deleted\", function () {",
							"    pm.response.to.have.status(200); ",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.deleted).to.eql(\"3\"); ",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"B Dhrubo\",\n  \"personnummer\": \"970101-5678\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/delete/3",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"delete",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Try to Delete Valid Student who passed course",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Student with courses cannot be deleted\", function () {",
							"    pm.response.to.have.status(400); ",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Student 5 cannot be deleted because they have associated courses\"); ",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"B Dhrubo\",\n  \"personnummer\": \"970101-5678\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/delete/5",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"delete",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student Invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response contains error message\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.error).to.eql(\"Student ID 999 does not exist\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"B Dhrubo\",\n  \"personnummer\": \"970101-5678\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/delete/999",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"delete",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List of All Programs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"All programs are retrieved successfully\", function () {",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an(\"array\");",
							"    pm.expect(responseJson.length).to.be.above(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"B Dhrubo\",\n  \"personnummer\": \"970101-5678\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/program",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"program"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Required Courses with Valid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response structure is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\", 1);",
							"    pm.expect(jsonData).to.have.property(\"courses_required\").that.is.an(\"array\").with.length.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"B Dhrubo\",\n  \"personnummer\": \"970101-5678\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/program/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"program",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Required Courses with Non-existing ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Program ID does not exist\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"error\", \"Program ID 999 does not exist\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"B Dhrubo\",\n  \"personnummer\": \"970101-5678\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/program/999",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"program",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Required Courses with Invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Program ID is not correct format\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"error\", \"Program ID abc is not formatted correctly.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"B Dhrubo\",\n  \"personnummer\": \"970101-5678\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/program/abc",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"program",
						"abc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Graduation Eligibility Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Graduation status is true\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"status\", true);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/finished/1/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"finished",
						"1",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Graduation Eligibility Check Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Program ID 999 does not exist\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"error\", \"Program ID 999 does not exist\");",
							"});",
							"",
							"pm.test(\"Error response is formatted correctly\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/finished/1/999",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"finished",
						"1",
						"999"
					]
				}
			},
			"response": []
		}
	]
}